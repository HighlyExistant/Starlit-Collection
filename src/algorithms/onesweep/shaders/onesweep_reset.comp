#version 450
layout(binding = 0) buffer GlobalHistogram {
    uint val[];
} global_histogram;
layout(binding = 1) buffer HistogramPass {
    uint val[];
} histogram_pass;
layout(binding = 2) buffer PartitionTileIndices {
    uint val[];
} indexbuf;
layout(push_constant, std430) uniform PushConstant {
    uint thread_blocks;
} pc;
#define RADIX                       256
#define RADIX_PASSES                4

layout (local_size_x = RADIX, local_size_y = 1, local_size_z = 1) in;

void main() {
    const uint increment = 256 * 256;
    const uint clear_end = pc.thread_blocks * RADIX * RADIX_PASSES;
    for (uint i = gl_GlobalInvocationID.x; i < clear_end; i += increment) {
        histogram_pass.val[i] = 0;
    }

    if (gl_GlobalInvocationID.x < RADIX * RADIX_PASSES) {
        global_histogram.val[gl_GlobalInvocationID.x] = 0;
    }
    
    if (gl_GlobalInvocationID.x < RADIX_PASSES) {
        indexbuf.val[gl_GlobalInvocationID.x] = 0;
    }
}